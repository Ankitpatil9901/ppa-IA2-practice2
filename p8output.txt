 
 gcc -g p8original.c
 gdb ./a.out
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./a.out...done.
(gdb) b main
Breakpoint 1 at 0xaf9: file p8original.c, line 71.
(gdb) r
Starting program: /home/runner/ppa-IA2-practice2/a.out 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, main () at p8original.c:71
71  {
(gdb) n
72    int count = input_n();
(gdb) s
input_n () at p8original.c:9
9   {
(gdb) n
11    printf("How many triangles will you enter:\n");
(gdb) n
How many triangles will you enter:
12    scanf("%d", &n);
(gdb) n
5
13    return n;
(gdb) n
14  }
(gdb) n
main () at p8original.c:73
73    Triangle tris[count];
(gdb) s
74    input_n_triangles(count, tris);
(gdb) s
input_n_triangles (n=5, t=0x7ffeffedb290) at p8original.c:27
27    for (int i = 0; i < n; i++)
(gdb) n
29      t[i] = input_triangle();
(gdb) n
Enter the base, altitude of a triangle:
5
5
27    for (int i = 0; i < n; i++)
(gdb) n
29      t[i] = input_triangle();
(gdb) n
Enter the base, altitude of a triangle:
5
5
27    for (int i = 0; i < n; i++)
(gdb) n
29      t[i] = input_triangle();
(gdb) n
Enter the base, altitude of a triangle:
5
5
27    for (int i = 0; i < n; i++)
(gdb) n
29      t[i] = input_triangle();
(gdb) 
Enter the base, altitude of a triangle:
9
8
27    for (int i = 0; i < n; i++)
(gdb) n
29      t[i] = input_triangle();
(gdb) n
Enter the base, altitude of a triangle:
7  
7
27    for (int i = 0; i < n; i++)
(gdb) n
31  }
(gdb) n
main () at p8original.c:75
75    find_areas(count, tris);
(gdb) s
find_areas (n=5, t=0x7ffeffedb290) at p8original.c:40
40    for (int i = 0; i < n; i++)
(gdb) n
42      find_area(&t[i]);
(gdb) n
40    for (int i = 0; i < n; i++)
(gdb) n
42      find_area(&t[i]);
(gdb) n
40    for (int i = 0; i < n; i++)
(gdb) n
42      find_area(&t[i]);
(gdb) n
40    for (int i = 0; i < n; i++)
(gdb) n
42      find_area(&t[i]);
(gdb) n
40    for (int i = 0; i < n; i++)
(gdb) n
42      find_area(&t[i]);
(gdb) n
40    for (int i = 0; i < n; i++)
(gdb) n
44  }
(gdb) n
main () at p8original.c:76
76    Triangle small = find_smallest_triangle(count, tris);
(gdb) s
find_smallest_triangle (n=5, t=0x7ffeffedb290) at p8original.c:49
49    small = t[0];
(gdb) n
51    for (int i = 1; i < n; i++)
(gdb) n
53      if (small.area > t[i].area)
(gdb) n
51    for (int i = 1; i < n; i++)
(gdb) n
53      if (small.area > t[i].area)
(gdb) n
51    for (int i = 1; i < n; i++)
(gdb) n
53      if (small.area > t[i].area)
(gdb) n
51    for (int i = 1; i < n; i++)
(gdb) n
53      if (small.area > t[i].area)
(gdb) n
51    for (int i = 1; i < n; i++)
(gdb) n
58    return small;
(gdb) n
59  }
(gdb) n
main () at p8original.c:77
77    output(count, tris, small);
(gdb) s
output (n=5, t=0x7ffeffedb290, smallest=...) at p8original.c:63
63    for (int i = 0; i < n - 1; i++)
(gdb) n
65      printf("%f, %f and\n", t[i].base, t[i].altitude);
(gdb) n
5.000000, 5.000000 and
63    for (int i = 0; i < n - 1; i++)
(gdb) n
65      printf("%f, %f and\n", t[i].base, t[i].altitude);
(gdb) n
5.000000, 5.000000 and
63    for (int i = 0; i < n - 1; i++)
(gdb) n
65      printf("%f, %f and\n", t[i].base, t[i].altitude);
(gdb) n
5.000000, 5.000000 and
63    for (int i = 0; i < n - 1; i++)
(gdb) n
65      printf("%f, %f and\n", t[i].base, t[i].altitude);
(gdb) n
9.000000, 8.000000 and
63    for (int i = 0; i < n - 1; i++)
(gdb) n
67    printf("%f, %f\nis\ntriangle with base = %f and altitude = %f having area = %f\n", t[n-1].base, t[n-1].altitude, smallest.base, smallest.altitude, smallest.area);
(gdb) n
7.000000, 7.000000
is
triangle with base = 5.000000 and altitude = 5.000000 having area = 12.500000
68  }
(gdb) n
main () at p8original.c:78
78    return 0;
(gdb) n
79  }(gdb) q
A debugging session is active.

    Inferior 1 [process 74] will be killed.

Quit anyway? (y or n) y
